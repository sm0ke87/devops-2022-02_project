kind: Namespace
apiVersion: v1
metadata:
  name: app
---
#RabbitMQ
kind: Deployment
apiVersion: apps/v1
metadata:
  name: rabbitmq
  namespace: app
  labels:
    app: rabbitmq
    project: gitlab-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
      project: gitlab-project
  template:
    metadata:
      name: rabbitmq
      labels:
        app: rabbitmq
        project: gitlab-project
    spec:
      hostname: rabbitmq
      hostAliases:
      - ip: "127.0.0.1"
        hostnames:
        - "staticrabbit"
      containers:
      - name: rabbitmq
        # так мы назвали наш docker image
        image: sm0ke87/rabbitmq:main
---
kind: Service
apiVersion: v1
metadata:
  name: rabbitmq
  namespace: app
  labels:
    app: rabbitmq
    project: gitlab-project
spec:
  type: ClusterIP
  ports:
  - name: first
    protocol: TCP
    port: 5672
    targetPort: 5672
  - name: second  
    protocol: TCP
    port: 15672
    targetPort: 5672
  selector:
    app: rabbitmq
---
#Crawler
kind: Deployment
apiVersion: apps/v1
metadata:
  name: crawler
  namespace: app
  labels:
    app: crawler
    project: gitlab-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: crawler
      project: gitlab-project
  template:
    metadata:
      name: crawler
      labels:
        app: crawler
        project: gitlab-project
    spec:
      hostname: crawler
      containers:
      - name: crawler
        # так мы назвали наш docker image
        image: sm0ke87/search_engine_crawler:main
        env:
        - name: MONGO
          value: mongo
        - name: MONGO_PORT
          value: "27017"
---
kind: Service
apiVersion: v1
metadata:
  name: crawler
  namespace: app
  labels:
    app: crawler
    project: gitlab-project
spec:
  selector:
    app: crawler
  ports:
  - port: 8000
    protocol: TCP
    targetPort: 8000
---
#ui
kind: Deployment
apiVersion: apps/v1
metadata:
  name: ui
  namespace: app
  labels:
    app: ui
    project: gitlab-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ui
      project: gitlab-project
  template:
    metadata:
      name: ui
      labels:
        app: ui
        project: gitlab-project
    spec:
      hostname: ui
      containers:
      - name: ui
        # так мы назвали наш docker image
        image: sm0ke87/search_engine_ui:main
        env:
        - name: MONGO
          value: mongo
        - name: MONGO_PORT
          value: "27017"
---
kind: Service
apiVersion: v1
metadata:
  name: ui
  namespace: app
  labels:
    app: ui
    project: gitlab-project
spec:
  type: NodePort
  selector:
    app: ui
    project: gitlab-project
  ports:
  - port: 8000
    protocol: TCP
    targetPort: 8000
    
---
#mongo
kind: Deployment
apiVersion: apps/v1
metadata:
  name: mongo
  namespace: app
  labels:
    app: mongo
    project: gitlab-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
      project: gitlab-project
  template:
    metadata:
      name: mongo
      labels:
        app: mongo
        project: gitlab-project
    spec:
      hostname: mongo
      containers:
      - name: mongo
        # так мы назвали наш docker image
        image: mongo:3.2
        volumeMounts:
          - name: mongo-pv-storage
            mountPath: /data/db
      volumes:
      - name: mongo-pv-storage
        persistentVolumeClaim:
          claimName: pvc-dynamic
---
kind: Service
apiVersion: v1
metadata:
  name: mongo
  namespace: app
  labels:
    app: mongo
    project: gitlab-project
spec:
  ports:
  - port: 27017
    protocol: TCP
    targetPort: 27017
  selector:
    app: mongo
---
#Security
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt
  namespace: cert-manager
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: s.alimov87@yahoo.com
    privateKeySecretRef:
      name: letsencrypt
    solvers:
    - http01:
        ingress:
          class: nginx
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
  namespace: app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt"
spec:
  tls:
    - hosts:
      - informationsecurity.space
      secretName: letsencrypt
  rules:
    - host: informationsecurity.space
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: ui
              port:
                number: 8000
        - path: /grafana(/|$)(.*)
          pathType: ImplementationSpecific
          backend:
            service:
              name: grafana
              port:
                number: 3000
        - path: /prometheus(/|$)(.*)
          pathType: Prefix
          backend:
            service:
              name: prometheus
              port:
                number: 9090
---
#Prometeus
kind: Deployment
apiVersion: apps/v1
metadata:
  name: prometheus
  namespace: app
  labels:
    app: prometheus
    project: gitlab-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      project: gitlab-project
  template:
    metadata:
      name: prometheus
      labels:
        app: prometheus
        project: gitlab-project
    spec:
      hostname: prometheus
      containers:
      - name: prometheus
        # так мы назвали наш docker image
        image: sm0ke87/prometheus:main
        env:
        - name: ui
          value: ui
        - name: crwaler
          value: crawler

---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: app
  labels:
    app: prometheus
    project: gitlab-project
spec:
  type: NodePort
  ports:
  - protocol: TCP
    port: 9090
    targetPort: 9090
  selector:
    app: prometheus
---
#grafana
#Prometeus
kind: Deployment
apiVersion: apps/v1
metadata:
  name: grafana
  namespace: app
  labels:
    app: grafana
    project: gitlab-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      project: gitlab-project
  template:
    metadata:
      name: grafana
      labels:
        app: grafana
        project: gitlab-project
    spec:
      hostname: grafana
      containers:
      - name: grafana
        # так мы назвали наш docker image
        image: sm0ke87/grafana:main
        env:
        - name: GF_SERVER_ROOT_URL
          value: "http://localhost:3000/grafana"
        - name: GF_SERVER_SERVE_FROM_SUB_PATH
          value: 'true'
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: app
  labels:
    app: grafana
    project: gitlab-project
spec:
  type: NodePort
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
  selector:
    app: grafana
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-dynamic
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: yc-network-ssd
  resources:
    requests:
      storage: 4Gi
